from webbrowser import get
import config
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile

from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Dispatcher
from datetime import datetime
import locale


from create_bot import dp
from hh_rtrs import get_rtrn_vocancies



import requests
import datetime

open_weather_token = config.open_weather_token
lat = config.lat
lon = config.lon


router = Router()




@router.message(Command("start"))
async def start_command(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id

    # print(id_user)
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, [{user_name}](tg://user?id={user_id})\!', parse_mode="MarkdownV2")
    await message.answer('–Ø - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø—Ç–æ—à–Ω–∏–∫–∞–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –°–ª–∞–≤–ª—é—Å—å —É–º–æ–ø–æ–º—Ä–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Ä—Ç—Ä—Å-–Ω–æ–π —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é)))')

    # await message.reply('–ü—Ä–∏–≤–µ—Ç!')

@router.message(Command("hh_rtrn"))
async def get_hh_rtrs(message: types.Message):
    # await message.reply('–ü—Ä–∏–≤–µ—Ç!')
    get_rtrn_vocancies()
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é InputFile
    await message.reply_document(FSInputFile('filtered_vacancies.xlsx'), caption=f"[{user_name}](tg://user?id={user_id}), –¥–µ—Ä–∂–∏ —Ç–∞–±–ª–∏—á–∫—É –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru –ø–æ –£—Ñ–µ", parse_mode="Markdown")

    
@router.message(lambda message: '—Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è' in message.text.lower())
async def echo_happy_birthday(message: types.Message):
    await message.answer('ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥')

@router.message()
async def echo_send(message: types.Message):
    if ('–ø—Ä–∏–≤–µ—Ç' in message.text.lower()):
        await message.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!')  
    elif ('–ø–æ–≥–æ–¥–∞' in message.text.lower() and '–∫–∞–∫–∞—è' in message.text.lower()):
        text = get_weater()
        await message.reply(text, parse_mode="HTML")
    
@router.message(Command("–û_–±–æ—Ç–µ"))
async def about(message: types.Message):
    # await message.reply('–ü—Ä–∏–≤–µ—Ç!')
    await message.answer('–Ø - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø—Ç–æ—à–Ω–∏–∫–∞–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –°–ª–∞–≤–ª—é—Å—å —É–º–æ–ø–æ–º—Ä–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Ä—Ç—Ä—Å-–Ω–æ–π —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é)))')


    
# @router.message()
# async def get_weather(message: types.Message):
#     if ('–ø–æ–≥–æ–¥–∞' in message.text.lower() and '–∫–∞–∫–∞—è' in message.text.lower()):
#         text = get_weater()
#         await message.reply(text, parse_mode="HTML")
            
def get_weater():
    code_to_smile = {
    "Clear": "–Ø—Å–Ω–æ \U00002600",
    "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
    "Rain": "–î–æ–∂–¥—å \U00002614",
    "Drizzle": "–î–æ–∂–¥—å \U00002614",
    "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
    "Snow": "–°–Ω–µ–≥ \U0001F328",
    "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
        
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&appid={open_weather_token}&units=metric&lang=ru"
        )
        # print(r)
        data = r.json()
        # print(data)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
        current_weather = data['current']
        current_temperature = current_weather['temp']
        current_description = current_weather['weather'][0]['description']

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        daily_forecast = data['daily']

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ HTML-—Å—Ç–∏–ª–µ
        html_response = f"<b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b> {current_description}, <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {current_temperature}¬∞C\n\n"
        html_response += "<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π:</b>\n"

        for day in daily_forecast:
            date = day['dt']
            # date = datetime.datetime.fromtimestamp(day['dt']).strftime('%d.%m.%Y %A')
            temperature_morn = day['temp']['morn']
            temperature_day = day['temp']['day']
            temperature_eve = day['temp']['eve']
            temperature_night = day['temp']['night']
            description = day['weather'][0]['description']
            feels_like_morn = day['feels_like']['morn']
            feels_like_day = day['feels_like']['day']
            feels_like_eve = day['feels_like']['eve']
            feels_like_night = day['feels_like']['night']
            
            formatted_date = format_date(date)
            
            html_response += f"<b>{formatted_date}</b>\n"
            html_response += f"<b>–Ω–æ—á—å: <i>{temperature_night}¬∞C</i></b> - <b>–¥–µ–Ω—å: <i>{temperature_day}¬∞C</i></b>\n"            
            # html_response += f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>\n"
            # html_response += f"<i>–£—Ç—Ä–æ–º:</i> <b><i>{temperature_morn}¬∞C</i></b>, <i>–æ—â—É—â–∞–µ—Ç—Å—è:</i> <b><i>{feels_like_morn}¬∞C</i></b>\n"
            # html_response += f"<i>–î–Ω–µ–º:</i> <b><i>{temperature_day}¬∞C</i></b>, <i>–æ—â—É—â–∞–µ—Ç—Å—è:</i> <b><i>{feels_like_day}¬∞C</i></b>\n"
            # html_response += f"<i>–í–µ—á–µ—Ä–æ–º:</i> <b><i>{temperature_eve}¬∞C</i></b>, <i>–æ—â—É—â–∞–µ—Ç—Å—è:</i> <b><i>{feels_like_eve}¬∞C</i></b>\n"
            # html_response += f"<i>–ù–æ—á—å—é:</i> <b><i>{temperature_night}¬∞C</i></b>, <i>–æ—â—É—â–∞–µ—Ç—Å—è:</i> <b><i>{feels_like_night}¬∞C</i></b>\n"
            html_response += f"<i>{description}</i> \n\n"

        # –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –≤ HTML-—Å—Ç–∏–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ
        # print(datetime.datetime.fromtimestamp(day['dt']).strftime('%d.%m.%Y'))
        return html_response
    except:
        return "\U00002620 –ö—Ç–æ —Ç—É—Ç? \U00002620"
    
    
def format_date(timestamp):
    dt = datetime.datetime.fromtimestamp(timestamp)
    formatted_date = dt.strftime('%d.%m.%Y %A')
    return formatted_date

        
def get_location():
            r = requests.get(
            f"http://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=5&appid={open_weather_token}")
            data = r.json()
            location = data[0]["local_names"]["ru"]
            return location
        
# def register_handlers_client(dp : Dispatcher):
#     dp.register_message_handler(get_weather, commands=['–ø–æ–≥–æ–¥–∞'])
#     dp.register_message_handler(get_hh_rtrs, commands=['hh_rtrn'])
#     dp.register_message_handler(start_command, commands=['start'])
#     dp.register_message_handler(about, commands=['–û_–±–æ—Ç–µ'])